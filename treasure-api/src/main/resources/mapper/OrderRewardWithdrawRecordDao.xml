<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.treasure.dao.OrderRewardWithdrawRecordDao">


    <update id="updateByIds">

        update order_reward_withdraw_reocrd
        set is_used = #{status}
        <where>
            id in
            <foreach collection="ids" item="ids" open="(" close=")" separator=",">
                ${ids}
            </foreach>
        </where>

    </update>

    <update id="updateUsedStatus">

        update order_reward_withdraw_reocrd
        set is_used = ${status},msr_id = #{updateId}
        <where>
            id in
            <foreach collection="ids" item="ids" open="(" close=")" separator=",">
                ${ids}
            </foreach>
        </where>
    </update>

    <select id="generateSalesRewardRecord" parameterType="io.treasure.vo.MerchantSalesRewardRecordVo" resultType="io.treasure.entity.MerchantSalesRewardRecordEntity">

        select m_id as mId,sum(total_price) as salesVolume, count(*) as orderVolume,platform_income as commissionVolume, 1 as cashOutStatus,0 as deleted
        from order_reward_withdraw_reocrd
        <where>
            is_used = 0
            <if test="minValue != null and minValue != ''">
                and sales_volume >= #{minValue}
            </if>
            <if test="startTime != null and startTime != ''">
                and eat_time >= #{startTime}
            </if>
            <if test="stopTime != null and stopTime != ''">
                and #{stopTime} >= eat_time
            </if>
        </where>
        group by m_id
        order by salesVolume desc, orderVolume desc
        <!--limit #{index},#{pagesNum}-->

    </select>

    <select id="selectCommissionListByMid" resultType="io.treasure.entity.OrderRewardWithdrawRecordEntity">

        select * from order_reward_withdraw_reocrd
        where m_id = #{mId}
        and #{eDate} >= eat_time
        and is_used = 0
        and msr_id = 0
    </select>


    <sql id="insert_base_columns">
        m_id,order_id,is_used,eat_time,create_pmt,
        update_pmt,total_price,
        actual_payment,pay_coins,
        platform_income,version
    </sql>
    <sql id="insert_and_select">
    #{mId},${orderId}#{isUsed},#{eatTime},#{createPmt},
    #{updatePmt},#{totalPrice},
    #{actualPayment},#{payCoins}
    #{platformIncome},#{version}
    </sql>
    <update id="insertEntityWhenNotExists" useGeneratedKeys="true" keyProperty="id">

        INSERT INTO order_reward_withdraw_reocrd
        (
        <include refid="insert_base_columns"></include>
        )
        select
        <include refid="insert_and_select"></include>
        from dual
        where NOT EXISTS
        (
        select order_id from order_reward_withdraw_reocrd
        where order_id = ${orderId}
        )
    </update>

</mapper>
